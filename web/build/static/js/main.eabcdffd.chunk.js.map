{"version":3,"sources":["features/navbar/components/Navbar.tsx","features/sidebar/components/Sidebar.tsx","features/topics/store/actionTypes.ts","features/topics/store/actions.ts","features/topics/store/selectors.ts","features/topics/store/reducer.ts","features/topics/containers/TopicsList.tsx","features/interfaces/components/Interfaces.tsx","features/interfaces/containers/RS485InterfaceConfig.tsx","features/rules/container/Rules.tsx","common/RouteWithSubRoutes.tsx","app/App.tsx","store.ts","reportWebVitals.ts","index.tsx"],"names":["Navbar","className","theme","mode","Item","icon","AlignLeftOutlined","WifiOutlined","UserOutlined","Text","Typography","Sidebar","HomeOutlined","TableOutlined","to","LineChartOutlined","SettingOutlined","CodepenOutlined","QuestionOutlined","LogoutOutlined","ADD_ARTICLE","REMOVE_ARTICLE","dispatchAction","action","dispatch","getArticles","state","topics","articles","initialState","key","path","body","reducer","changed","type","actionTypes","changedArticles","map","item","article","newArticle","Math","random","concat","updatedArticles","filter","ws","WebSocket","DevicesList","useSelector","selectors","useDispatch","saveArticle","React","addArticle","useEffect","onopen","console","log","onmessage","e","msg","JSON","parse","data","Path","Message","onclose","alert","columns","title","dataIndex","dataSource","Title","Interfaces","level","size","block","Panel","Collapse","TabPane","Tabs","RS485InterfaceConfig","props","setLoading","value","setState","loading","getConfig","a","axios","get","result","config","this","prop","index","deviceNumber","debug","ports","el","i","devices","post","stringify","headers","then","response","active","defaultActiveKey","tab","htmlType","onClick","postConfig","Group","checked","enabled","onChange","input","changeConfig","target","id","name","addonBefore","defaultValue","baud_rate","parseInt","parity","data_bits","stop_bits","poll_interval","device","header","slave_id","device_type","Rules","jsoneditor","container","onChangeJSON","json","options","onChangeText","JSONEditor","ref","elem","RouteWithSubRoutes","route","exact","render","component","routes","Header","Layout","Sider","Content","TopicsList","App","collapsed","rootReducer","combineReducers","TopicsReducer","store","createStore","applyMiddleware","thunk","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.eabcdffd.chunk.js","sourcesContent":["import * as React from \"react\"\nimport { Menu } from 'antd'\nimport { AlignLeftOutlined, WifiOutlined, UserOutlined } from '@ant-design/icons'\nimport '../css/Navbar.css'\n\nconst Navbar:React.FC = () => {\n    return (\n      <div className=\"navbar-wrapper\">\n        <Menu className=\"navbar\" theme=\"dark\" mode=\"horizontal\">\n          <Menu.Item key=\"1\" className=\"menu-button\" icon={<AlignLeftOutlined />}></Menu.Item>\n          <Menu.Item key=\"2\" className=\"\" icon={<WifiOutlined />}></Menu.Item>\n          <Menu.Item key=\"3\" className=\"\" icon={<UserOutlined />}></Menu.Item>\n        </Menu>\n      </div>\n    )\n}\n\n\nexport default Navbar;\n","import * as React from 'react'\nimport { Link } from \"react-router-dom\";\nimport { Menu, Typography } from 'antd';\nimport { HomeOutlined, TableOutlined, LineChartOutlined, SettingOutlined, QuestionOutlined,CodepenOutlined,  LogoutOutlined } from '@ant-design/icons'\nimport '../css/Sidebar.css'\nconst { Text } = Typography;\n\n\nconst Sidebar:React.FC = ()=> {\n    return (\n      <div className=\"sidebar\">\n        <Text className=\"logo\">WIREN BOARD</Text>\n        <Menu className=\"sidebar-menu\" theme=\"dark\" >\n          <Menu.Item  className=\"sidebar-item\" icon={<HomeOutlined />}>\n            Dashboard\n          </Menu.Item>\n          <Menu.Item  className=\"sidebar-item\" icon={<TableOutlined />}>\n            <Link  to=\"/topics\">Topics</Link>\n          </Menu.Item>\n          <Menu.Item  className=\"sidebar-item\" icon={<LineChartOutlined />}>\n            Charts\n          </Menu.Item>\n          <Menu.Item key=\"4\" className=\"sidebar-item\" icon={<SettingOutlined />}>\n            <Link to=\"/devices\">Settings</Link> \n            </Menu.Item>\n          <Menu.Item  className=\"sidebar-item\" icon={<CodepenOutlined/>}>\n            <Link to=\"/rules\">Rules</Link> \n          </Menu.Item>\n          <Menu.Item  className=\"sidebar-item\" icon={<QuestionOutlined />}>\n            Support\n          </Menu.Item>\n          <Menu.Item  className=\"sidebar-item\" icon={<LogoutOutlined />}>\n            Permissions\n          </Menu.Item>\n        </Menu>\n      </div>\n    )\n}\n\nexport default Sidebar;\n","export const WS_REQUEST: string = 'CONNECT_WS_REQUEST'\nexport const WS_SUCCESS: string = 'CONNECT_WS_SUCCESS'\nexport const WS_ERROR: string = 'CONNECT_WS_ERROR'\nexport const ADD_ARTICLE = \"ADD_ARTICLE\"\nexport const REMOVE_ARTICLE = \"REMOVE_ARTICLE\"\n\n// export {\n//   CONNECT_WS_REQUEST,\n//   CONNECT_WS_SUCCESS,\n//   CONNECT_WS_ERROR,\n// };\n\n","import * as actionTypes from './actionTypes';\n\nexport function wsRequest(){\n  const action:WebsocketAction  = {\n    type: actionTypes.WS_REQUEST\n  }\n  return action\n}\nexport function wsConnSuccess(){\n  const action:WebsocketAction  = {\n    type: actionTypes.WS_REQUEST,\n    status: true\n  }\n  return action\n}\nexport function wsConnError(error:Error){\n  const action:WebsocketAction  = {\n    type: actionTypes.WS_ERROR,\n    status: error\n  }\n  return action\n}\n\n\nexport function addArticle(article: IMqttChannel) {\n  const action: ChannelAction = {\n    type: actionTypes.ADD_ARTICLE,\n    article,\n  }\n\n  return dispatchAction(action)\n}\n\nexport function removeArticle(article: IMqttChannel) {\n  const action: ChannelAction = {\n    type: actionTypes.REMOVE_ARTICLE,\n    article,\n  }\n  return dispatchAction(action)\n}\n\nexport function dispatchAction(action: ChannelAction) {\n  return (dispatch: DispatchType) => {\n      dispatch(action)\n  }\n}\n\n\n// const { WS_BASE } = constants;\n// const { CONNECT_WS_REQUEST, CONNECT_WS_SUCCESS, CONNECT_WS_ERROR } = actionTypes;\n\n// export const connectWebsocketRequest = (): object => {\n//   return {\n//     type: CONNECT_WS_REQUEST\n//   }\n// }\n\n// export const connectWebsocketSuccess = (payload: any): object => {\n//   return {\n//     type: CONNECT_WS_SUCCESS,\n//     payload,\n//   }\n// }\n\n// export const connectWebsocketError = (error: Error): object => {\n//   return {\n//     type: CONNECT_WS_ERROR,\n//     error,\n//   }\n// }\n\n// export const connectWebsocket = () => {\n//   return async (dispatch: any) => {\n//     dispatch(connectWebsocketRequest());\n//     try {\n//       const response: any = await axios.get(`${WS_BASE}`)\n//       dispatch(connectWebsocketSuccess(response.data))\n//     } catch (error) {\n//       dispatch(connectWebsocketError(error))\n//     }\n//   }\n// }\n","export const getArticles =  (state: ChannelState) => state.topics.articles//shallowEqual)","//import { message } from 'antd';\nimport * as actionTypes from './actionTypes'\n\nconst initialState  = {\n  articles: [\n    {\n      key: 1,\n      path: \"/test/topic\",\n      body:\n        \"ON\",\n    },\n    {\n      key: 2,\n      path: \"/test/topic/on\",\n      body:\n        \"32.35 C\",\n    },\n  ],\n\n}\n\nconst reducer = (\n  state= initialState,\n  action: ChannelAction\n) => {\n  let changed = false;\n  switch (action.type) {\n    case actionTypes.ADD_ARTICLE:\n      let changedArticles = state.articles.map((item)=>{\n        if(action.article.path === item.path){\n          changed = true;\n          return {\n            key:item.key,\n            path:item.path,\n            body:action.article.body\n          }\n        }\n        return item\n      })\n      if (changed){\n        changed = false;\n        return{\n          ...state,\n          articles:changedArticles\n        }\n      }\n\n\n      const newArticle: IMqttChannel = {\n        key: Math.random(), // not really unique\n        path: action.article.path,\n        body: action.article.body,\n      }\n      return {\n        ...state,\n        articles: state.articles.concat(newArticle),\n      }\n    case actionTypes.REMOVE_ARTICLE:\n      const updatedArticles: IMqttChannel[] = state.articles.filter(\n        article => article.key !== action.article.key\n      )\n      return {\n        ...state,\n        articles: updatedArticles,\n      }\n  }\n  return state\n}\n\nexport default reducer\n\n\n// const { CONNECT_WS_ERROR, CONNECT_WS_SUCCESS } = actionTypes\n\n// const initialState: WebsocketState = {\n//   messages:[\n//   { \n//     from:'Test',\n//     message:'MY FIRST DATA',\n//   },\n//   ]\n// }\n\n// const reducer = (\n//   state: WebsocketState = initialState,\n//   action: WebsocketAction\n// ): WebsocketState => {\n//   switch (action.type) {\n//     case CONNECT_WS_SUCCESS:\n//       return {\n//         ...state,\n//         log: state.log.concat(\"Lorem\")\n//       }\n//     case CONNECT_WS_ERROR:\n//       return {\n//         ...state,\n//         messages: new Error(\"Unable to get a websocket connection\")\n//       }\n//   }\n//   return state\n// }\n\n// export default reducer;\n","import * as React from 'react'\nimport { useEffect } from 'react'\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { Dispatch } from \"redux\"\nimport {Table} from 'antd'\n\nimport { addArticle } from \"../store/actions\"\nimport {selectors} from '../store'\n\n\nconst ws = new WebSocket('ws://localhost:8080/ws')\nconst DevicesList:React.FC = () =>{\n    const articles = useSelector(selectors.getArticles)\n    const columns =[\n        {\n            title:'Path',\n            dataIndex:'path',\n            key:'path'\n        },\n        {\n            title:'Body',\n            dataIndex:'body',\n            key:'body'\n            },\n    ]\n    \n    const dispatch: Dispatch<any> = useDispatch()\n    \n    const saveArticle = React.useCallback(\n        (article: IMqttChannel) => dispatch(addArticle(article)),\n        [dispatch]\n    )\n\n    useEffect(() => {\n        ws.onopen = ()=>{\n            console.log(\"Connected to server localhost:1883!!\")\n        }\n        ws.onmessage = (e) =>{\n            let msg = JSON.parse(e.data)\n            console.log(msg)\n            let article:IMqttChannel = {\n                key:Math.random(),\n                path:msg.Path,\n                body:msg.Message\n            }\n            saveArticle(article)\n        }\n        ws.onclose = function(){\n            alert(\"Connection has been closed\")\n    }\n    });\n\n        return(\n            <main>\n            {/* <AddArticle saveArticle={saveArticle} /> \n            {articles.map((article: IMqttChannel) => (\n            <Article\n                key={article.key}\n                article={article}\n                removeArticle={removeArticle}\n            />\n            ))}   */}\n            <Table columns={columns} dataSource={articles}/>\n            </main>\n        )\n    }\n\nexport default DevicesList;","import * as React from 'react'\nimport { Link} from \"react-router-dom\";\nimport {Button,Typography} from 'antd'\n\nimport '../css/devices.css'\n\nconst { Title } = Typography;\n\n\n\n\nconst Interfaces:React.FC = () =>{\n        return(\n            <>         \n            <Title level={4}>Интерфейсы</Title>           \n                <Link to=\"/devices/rs-485\">\n                    <Button size=\"large\" type=\"primary\" block >\n                        RS-485\n                    </Button>\n                </Link>\n                <Button size=\"large\" block>База данных SQLite</Button>\n                <Button size=\"large\" block>Modbus</Button>\n                <Button size=\"large\" block>ADC</Button>\n            </>\n        )\n}\n\nexport default Interfaces;","import * as React from 'react'\nimport axios from 'axios'\nimport { Button,Input,Checkbox,Collapse,Tabs,Skeleton} from 'antd'\n\nconst { Panel } = Collapse;\nconst { TabPane } = Tabs;\n\ninterface FieldData {\n    debug: boolean,\n    ports: portsField[],\n}\n\ninterface portsField{\n    path:string,\n    devices:[\n        {\n        slave_id: number,\n        device_type: string\n        }\n    ],\n    port_type: string,\n    baud_rate: number,\n    parity: string,\n    data_bits: number,\n    stop_bits: number,\n    poll_interval: number,\n    enabled: boolean,\n    type: boolean\n}\n\ninterface State {\n    config:FieldData|null,\n    loading:boolean,\n}\n\nclass RS485InterfaceConfig extends React.Component<{},State>{\n    constructor(props:any){\n        super(props)\n        this.state = {\n            config:null,\n            loading:true,\n        }\n    }\n    setLoading = (value:boolean)=>{\n        this.setState({\n            ...this.state,\n            loading:value\n        })\n    }\n    getConfig = async ()=>{\n        this.setLoading(true)\n        try {\n            const result = await axios.get('http://192.168.1.101:8080/config/rs485');\n            this.setState({\n                config:result.data\n            })\n        } catch (error) {\n            \n        }\n        finally{\n            this.setLoading(false)\n        }\n    }\n    componentDidMount(){\n        this.setLoading(true)\n        this.getConfig()\n    }\n    \n    changeConfig(prop:string,value:any,index:number,deviceNumber?:number){\n        if(this.state.config){\n            this.setState({\n                ...this.state,\n                config:{\n                    debug:false,\n                    ports:this.state.config.ports.map((el:any,i:number)=>{\n                            if(i === index){\n                                if(deviceNumber!=null){\n                                    el.devices[deviceNumber][prop] = value\n                                    return el\n                                }\n                                el[prop] = value\n                                return el\n                            }\n                            return el\n                        })\n                    \n                }\n            })\n        }\n    }\n\n    postConfig(){\n        console.log(this.state.config)\n        axios.post('http://localhost:8080/config/rs485',\n            JSON.stringify(this.state.config),\n            {\n                headers:{\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json',\n                }\n            })\n        .then(function (response) {\n            console.log(response);\n        })\n    }\n\n\n    render(){\n        const {loading,config} = this.state\n        if(loading){\n            return <Skeleton active />\n        }\n        if(!loading&&config!==null){\n        return(\n            <>\n                <Tabs defaultActiveKey=\"1\">\n                {config.ports.map((el:any,i:number)=>{\n                    return(\n                        <TabPane tab={\"Порт \"+el.path} key={i}>\n                        <Button htmlType=\"button\" onClick={()=>this.postConfig()}>Save</Button>\n                        <Input.Group size=\"large\" >\n                        <Checkbox\n                        checked={el.enabled}\n                        onChange={(input)=>this.changeConfig(\"enabled\",input.target.checked,i)}\n                        >Enabled</Checkbox>\n            \n                        <Input\n                            id={\"baud_rate_\"+ i}\n                            name=\"baud_rate\"\n                            addonBefore=\"baud_rate\"\n                            defaultValue={el.baud_rate}\n                            onChange={(input)=>this.changeConfig(\"baud_rate\",parseInt(input.target.value),i)}\n                        />\n            \n                        <Input\n                            id={\"parity_\"+ i}\n                            name=\"parity\"\n                            addonBefore=\"parity\"\n                            defaultValue={el.parity}\n                            onChange={(input)=>this.changeConfig(\"parity\",input.target.value,i)}\n                        />\n            \n                        <Input\n                            id={\"data_bits_\"+ i}\n                            name=\"data_bits\"\n                            addonBefore=\"data_bits\"\n                            defaultValue={el.data_bits}\n                            onChange={(input)=>this.changeConfig(\"data_bits\",parseInt(input.target.value),i)}\n                        />\n            \n                        <Input\n                            id={\"stop_bits_\"+ i}\n                            name=\"stop_bits\"\n                            addonBefore=\"stop_bits\"\n                            defaultValue={el.stop_bits}\n                            onChange={(input)=>this.changeConfig(\"stop_bits\",parseInt(input.target.value),i)}\n                        />\n            \n                        <Input\n                            id={\"poll_interval_\"+ i}\n                            name=\"poll_interval\"\n                            addonBefore=\"poll_interval\"\n                            defaultValue={el.poll_interval}\n                            onChange={(input)=>this.changeConfig(\"poll_interval\",parseInt(input.target.value),i)}\n                        />\n                        <Collapse>\n                        {el.devices.map((device:any,index:number)=>{\n                            return(\n                                <Panel key={i} header={\"Устройство \"+(i+1)}> \n                                        <Input\n                                            addonBefore=\"slave_id\"\n                                            defaultValue={device.slave_id}\n                                            onChange={(input)=>{this.changeConfig(\"slave_id\",parseInt(input.target.value),i,index)}}\n                                        />\n                                        <Input\n                                            addonBefore=\"device_type\"\n                                            defaultValue={device.device_type}\n                                            onChange={(input)=>{}}\n                                        />\n                                </Panel>    \n                            )\n                        })}\n                        </Collapse>\n                        </Input.Group>\n                        </TabPane>\n                    )\n                })}\n                </Tabs>\n            </>\n        )\n        }\n    }\n}\nexport default RS485InterfaceConfig;","import * as React from 'react';\nimport JSONEditor, { JSONEditorOptions } from 'jsoneditor';\n\nimport 'jsoneditor/dist/jsoneditor.css';\n\nclass Rules extends React.Component{\n    public jsoneditor:any;\n    public container:any;\n    onChangeJSON = (json:any)=>{\n        // console.log(json)\n    }\n    componentDidMount () {\n        const options:JSONEditorOptions = {\n            mode: \"code\",\n            onChangeText: this.onChangeJSON,\n            \n        };\n        \n        this.jsoneditor = new JSONEditor(this.container,options);\n    }\n    render(){\n        return(\n            <div className=\"jsoneditor-react-container\" ref={elem => this.container = elem} />\n        )\n    }\n}\n\nexport default Rules;","import * as React from 'react';\nimport { Route } from \"react-router-dom\";\n\nfunction RouteWithSubRoutes(route:any) {\n    return (\n      <Route\n        path={route.path}\n        exact={route.exact}\n        render={props => (\n          // pass the sub-routes down to keep nesting\n          <route.component  {...props} routes={route.routes} />\n        )}\n      />\n    );\n  }\nexport default RouteWithSubRoutes;","import * as React from \"react\"\nimport { BrowserRouter as Router,Switch } from \"react-router-dom\";\nimport { Layout } from 'antd';\n\n\nimport Navbar from '../features/navbar/components/Navbar'\nimport Sidebar from '../features/sidebar/components/Sidebar'\nimport TopicsList from '../features/topics/containers/TopicsList'\nimport Interfaces from '../features/interfaces/components/Interfaces'\nimport RS485InterfaceConfig from '../features/interfaces/containers/RS485InterfaceConfig'\nimport Rules from '../features/rules/container/Rules'\nimport RouteWithSubRoutes from '../common/RouteWithSubRoutes'\n\nimport './css/App.css'\n\nconst { Header, Sider, Content } = Layout;\n\n\nconst routes = [\n  {\n    path: \"/topics\",\n    component: TopicsList\n  },\n  {\n    path: \"/devices\",\n    exact:true,\n    component: Interfaces,\n  },\n  {\n    path: \"/devices/rs-485\",\n    component: RS485InterfaceConfig,\n  },\n  {\n    path: \"/rules\",\n    component: Rules,\n  },\n];\n\n\n\nconst App: React.FC = () => {\n\n  return (\n    <Router>\n    <Layout>\n        <Sider collapsed={true}>{<Sidebar/>}</Sider>\n      <Layout>\n        <Header className=\"sider\"><Navbar/></Header>\n        <Content className=\"content\">\n          <Switch>\n            {routes.map((route, i) => (\n                <RouteWithSubRoutes key={i} {...route} />\n            ))}\n          </Switch>\n        </Content>\n        </Layout>\n      </Layout>\n      </Router>\n  )\n}\n\nexport default App;","import { combineReducers,applyMiddleware, createStore} from 'redux'\nimport thunk from 'redux-thunk';\n\nimport { TopicsReducer } from './features/topics/store'\n\nconst rootReducer =  combineReducers({\n    topics: TopicsReducer,\n    })\n\n\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunk)\n)\n\nexport default store","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\n\nimport App from './app/App';\nimport store from './store'\nimport reportWebVitals from './reportWebVitals';\n\n//const store: Store<ChannelState, ChannelAction> & {\n//  dispatch: DispatchType,\n//} = createStore(reducer, applyMiddleware(thunk))\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}